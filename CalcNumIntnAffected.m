function TTProg = CalcNumIntnAffected(Compartments,Params,TTProg,Year,j)

%Purpose: Calculate number of individuals affected by interventions during timestep

%   Discrete version: called from CalcTransRates
        % j = 1 (always)
%   Continuous version: called from StepStateCont
        % j = ode step

    % Determine time step
    if Params.SolveCont == 1 % continuous run
        tstep = TTProg.timePerODEStep(TTProg.k); 
    else % discrete run
        tstep = Params.tt_tstep;
    end
    

    % Calculate Testing rates and number of tests
    for testSection = 1:1
    
    % Pull test sensitivities for that year
        TestSens_Rapid_Acute = TTProg.TestSens_Rapid_Acute;
        TestSens_Conv_Acute = TTProg.TestSens_Conv_Acute;
        TestSens_Rapid_Chronic = TTProg.TestSens_Rapid_Chronic;
        TestSens_Conv_Chronic = TTProg.TestSens_Conv_Chronic;

   
    % Calculate rates per time step
       tsAcuteTestRate = tstep * TTProg.AcuteTestRate;
       tsLatentATestRate = tstep * TTProg.LatentATestRate;
       tsLatentBTestRate = tstep * TTProg.LatentBTestRate;
       tsLateTestRate = tstep * TTProg.LateTestRate;
       tsAIDSTestRate = tstep * TTProg.AIDSTestRate;
       tsUninfectedTestRate = tstep * TTProg.UninfectedTestRate;
    
   % Calculate number of tests
        TTProg.numTSPosRapidAcuteTests = ...
            TTProg.PctTestsRapid .* (...
            TestSens_Rapid_Acute .* (Compartments(Params.B1,:)' .* tsAcuteTestRate));

        TTProg.numTSPosConvAcuteTests= ...
            (1-TTProg.PctTestsRapid) .* (...
            TestSens_Conv_Acute .* (Compartments(Params.B1,:)' .* tsAcuteTestRate));

        TTProg.numTSPosRapidChronicTests = ...
            TTProg.PctTestsRapid .* (...
            TestSens_Rapid_Chronic .* (...
            Compartments(Params.C1,:)' .* tsLatentATestRate + ...
            Compartments(Params.D1,:)' .* tsLatentBTestRate + ...
            Compartments(Params.E1,:)' .* tsLateTestRate + ...
            Compartments(Params.F1,:)' .* tsAIDSTestRate));

        TTProg.numTSPosConvChronicTests = ...
            (1-TTProg.PctTestsRapid) .* (...
            TestSens_Conv_Chronic .* (...
            Compartments(Params.C1,:)' .* tsLatentATestRate + ...
            Compartments(Params.D1,:)' .* tsLatentBTestRate + ...
            Compartments(Params.E1,:)' .* tsLateTestRate + ...
            Compartments(Params.F1,:)' .* tsAIDSTestRate));

        numTSPosRapidTests = ...
             TTProg.numTSPosRapidAcuteTests + TTProg.numTSPosRapidChronicTests;
        numTSPosConvTests = ...
            TTProg.numTSPosConvAcuteTests + TTProg.numTSPosConvChronicTests;


         TTProg.numTSNegRapidTests = ...
            TTProg.PctTestsRapid .* (...
            Compartments(Params.A1,:)' .* tsUninfectedTestRate + ...
            (1 - TestSens_Rapid_Acute) .* (Compartments(Params.B1,:)' .* tsAcuteTestRate) + ...
            (1 - TestSens_Rapid_Chronic) .* (...
            Compartments(Params.C1,:)' .* tsLatentATestRate + ...
            Compartments(Params.D1,:)' .* tsLatentBTestRate + ...
            Compartments(Params.E1,:)' .* tsLateTestRate + ...
            Compartments(Params.F1,:)' .* tsAIDSTestRate));

          TTProg.numTSNegConvTests = ...
            (1 - TTProg.PctTestsRapid) .* (...
            Compartments(Params.A1,:)' .* tsUninfectedTestRate + ...
            (1 - TestSens_Conv_Acute) .* (Compartments(Params.B1,:)' .* tsAcuteTestRate) + ...
            (1 - TestSens_Conv_Chronic) .* (...
            Compartments(Params.C1,:)' .* tsLatentATestRate + ...
            Compartments(Params.D1,:)' .* tsLatentBTestRate + ...
            Compartments(Params.E1,:)' .* tsLateTestRate + ...
            Compartments(Params.F1,:)' .* tsAIDSTestRate));

        % Number of people notified

        TTProg.numTSConvPosNotify = ...
           numTSPosConvTests .* TTProg.NotifyPosConvProb;
   
        TTProg.numTSConvNegNotify = ...
            TTProg.numTSNegConvTests .* TTProg.NotifyNegConvProb;

        TTProg.numTSRapidPosNotify = ...
            numTSPosRapidTests.* TTProg.NotifyPosRapidProb;

        TTProg.numTSRapidNegNotify = ...
            TTProg.numTSNegRapidTests .* TTProg.NotifyNegRapidProb;
        
        

   % Calculation of status quo testing rates  
        
        % ET 9Dec2014 added j == 1 as a condition
            % Because the variable "Year" doesn't update every ode step for
            % the continuous version (it updates in HIVEpiModel),
            % the if statement was valid for every ode step during that year, not just the first (would
            % inappropriately write over values)
                % E.g., when the model time is "2006.003", Year = 2006

            % Not an issue for discrete
            
        % ET 24Nov2014 moved from CTP to CNT and adjusted the rates calcs
        % KH changed on 8Oct2014 so that it's based on last collection year
        % and not last year of model time horizon
        % ET added 26Sept2014
        
                
       
          LastOutcomeYr = min(Params.tt_modelStartYear+Params.tt_timeHorizon-1,Params.outcomeCollectionEndYr);

       % JC - I have suppressed the use of the rateYear but will keep these
       % lines here in case we bring it back
          
       %  rateYear = min(Params.diagRateYr,LastOutcomeYr);
       
       % if (Year == rateYear && j == 1) 
       YrIndex = max(floor(Year - Params.outcomeCollectionStartYr + 1),0);
       
       if ((j == 1) && (YrIndex >0))  % first timestep of year and only during outcome collection period
           
            % Setting up compartment groupings
                % HIV+ who are eligible to be tested
                HIVPosTestEligComparts = [Params.B1,Params.C1,Params.D1,Params.E1,Params.F1];
            
                % HIV+ and HIV - who are eligible to be tested
                TestEligComparts = [Params.A1,Params.B1,Params.C1,Params.D1,Params.E1,Params.F1];
            
            % Calculation of population sizes by cohort
                % Number of people who are HIV+ undiagnosed and willing (or
                % AIDS)
                TestEligHIVPosPopByCohort = sum(Compartments(HIVPosTestEligComparts,:));
            
                % All people eligible to be tested by cohort 
                    % HIV+ and HIV-
                TotalTestEligPopByCohort = sum(Compartments(TestEligComparts,:));
            
                % Pull rates out of struct
                   AcuteTestRate = TTProg.AcuteTestRate;
                   LatentATestRate = TTProg.LatentATestRate;
                   LatentBTestRate = TTProg.LatentBTestRate;
                   LateTestRate = TTProg.LateTestRate;
                   AIDSTestRate = TTProg.AIDSTestRate;
                   UninfectedTestRate = TTProg.UninfectedTestRate;
                   
            % Annual Diagnosis Rates (by disease stage)

                AcuteDiagRate =  AcuteTestRate .* TTProg.WtdSensAndNotify_Acute;
                LatentADiagRate = LatentATestRate .* TTProg.WtdSensAndNotify_Chronic;
                LatentBDiagRate = LatentBTestRate .* TTProg.WtdSensAndNotify_Chronic;
                LateDiagRate = LateTestRate .* TTProg.WtdSensAndNotify_Chronic;
                AIDSDiagRate = AIDSTestRate .* TTProg.WtdSensAndNotify_Chronic;
                
             
            % Weighted rates for each cohort
                % Across disease stages
            
                % Test rate by cohort for HIV+ and HIV-
                    % Calculation of the weighted rate of being tested by
                    % cohort out of all people eligible to be tested
                        % HIV- willing and HIV+ undiagnosed and willing and AIDS UW
                    WeightedTestRateAllEligByCohort = ...
                        (UninfectedTestRate' .* Compartments(Params.A1,:) + ...
                        AcuteTestRate' .* Compartments(Params.B1,:) + ...
                        LatentATestRate' .* Compartments(Params.C1,:) + ...
                        LatentBTestRate' .* Compartments(Params.D1,:) + ...
                        LateTestRate' .* Compartments(Params.E1,:) + ...
                        AIDSTestRate' .* Compartments(Params.F1,:))...
                        ./ TotalTestEligPopByCohort;
                
                % Overall Test rate for HIV+ and HIV-
                    % Calculation of the weighted rate of being tested 
                    % out of all people eligible to be tested    
                WeightedTestRateAllElig = ...
                        sum((UninfectedTestRate' .* Compartments(Params.A1,:) + ...
                        AcuteTestRate' .* Compartments(Params.B1,:) + ...
                        LatentATestRate' .* Compartments(Params.C1,:) + ...
                        LatentBTestRate' .* Compartments(Params.D1,:) + ...
                        LateTestRate' .* Compartments(Params.E1,:) + ...
                        AIDSTestRate' .* Compartments(Params.F1,:)))...
                        / sum(TotalTestEligPopByCohort);                  

                % Test rate by cohort for HIV+
                    % Calculation of weighted rate of being tested for
                    % each cohort for all people who are HIV+ undiagnosed
                    WeightedTestRateHIVPosByCohort = ...
                        (AcuteTestRate' .* Compartments(Params.B1,:) + ...
                        LatentATestRate' .* Compartments(Params.C1,:) + ...
                        LatentBTestRate' .* Compartments(Params.D1,:) + ...
                        LateTestRate' .* Compartments(Params.E1,:) + ...
                        AIDSTestRate' .* Compartments(Params.F1,:))...
                        ./ TestEligHIVPosPopByCohort;

                % Diagnosis rate by cohort (HIV+)
                    % Calculation of the weighted rate of being diagnosed by
                    % cohort out of all people eligible to be diagnosed
                        % HIV+ undiagnosed willing and AIDS UW
                    WeightedDiagRateGivenHIVPos = ...
                        (AcuteDiagRate' .* Compartments(Params.B1,:) + ...
                        LatentADiagRate' .* Compartments(Params.C1,:) + ...
                        LatentBDiagRate' .* Compartments(Params.D1,:) + ...
                        LateDiagRate' .* Compartments(Params.E1,:) + ...
                        AIDSDiagRate' .* Compartments(Params.F1,:))...
                        ./TestEligHIVPosPopByCohort;

            % Overall rates by race/ethnicities
                for r = Params.race_B:Params.race_O
                    
                    %Testing HIV- and HIV+
                    RaceSpecificAllEligTestRate(r) = ...
                        sum(WeightedTestRateAllEligByCohort .* ...
                        TotalTestEligPopByCohort .* ...
                        Params.raceIndicator(:,r)') /...
                        sum(TotalTestEligPopByCohort .* Params.raceIndicator(:,r)');
                    
                    % Testing HIV+
                    RaceSpecificHIVPosTestRate(r) = ...
                        sum(WeightedTestRateHIVPosByCohort .* ...
                        TestEligHIVPosPopByCohort .* ...
                        Params.raceIndicator(:,r)') /...
                        sum(TestEligHIVPosPopByCohort .* Params.raceIndicator(:,r)');
                    
                    %Diagnosis
                    RaceSpecificDiagRate(r) = ...
                        sum(WeightedDiagRateGivenHIVPos .* ...
                        TestEligHIVPosPopByCohort .* ...
                        Params.raceIndicator(:,r)') /...
                        sum(TestEligHIVPosPopByCohort .* Params.raceIndicator(:,r)');
                
                end
                
                % Diagnosis rate across all subpopulations
                DiagRateAll = ...
                    sum(WeightedDiagRateGivenHIVPos .* ...
                    TestEligHIVPosPopByCohort) /...
                    sum(TestEligHIVPosPopByCohort);
               
                % High risk HETs
                    
                    %Testing - All Eligible (HIV- and HIV+)
                    HRHTestAllEligRate = sum(WeightedTestRateAllEligByCohort .* ...
                         TotalTestEligPopByCohort .* ...
                         Params.HRHIndicator') /...
                         sum(TotalTestEligPopByCohort .*Params.HRHIndicator');  

                    % Testing - HIV+ only
                    HRHTestHIVPosRate = sum(WeightedTestRateHIVPosByCohort .* ...
                         TestEligHIVPosPopByCohort .* ...
                         Params.HRHIndicator') /...
                         sum(TestEligHIVPosPopByCohort .*Params.HRHIndicator');  

                    % Diagnosis - HIV+ only
                    HRHDiagRate = sum(WeightedDiagRateGivenHIVPos .* ...
                        TestEligHIVPosPopByCohort .* ...
                        Params.HRHIndicator') /...
                        sum(TestEligHIVPosPopByCohort .*Params.HRHIndicator');  
              
                    
                % Low risk HETs
                
                    %Testing - All Eligible (HIV- and HIV+)
                    LRHTestAllEligRate = sum(WeightedTestRateAllEligByCohort .* ...
                         TotalTestEligPopByCohort .* ...
                         Params.LowRiskHETIndicator') /...
                         sum(TotalTestEligPopByCohort .*Params.LowRiskHETIndicator');  

                    % Testing - HIV+ only
                    LRHTestHIVPosRate = sum(WeightedTestRateHIVPosByCohort .* ...
                         TestEligHIVPosPopByCohort .* ...
                         Params.LowRiskHETIndicator') /...
                         sum(TestEligHIVPosPopByCohort .*Params.LowRiskHETIndicator');  
 

                    % Diagnosis - HIV+ only
                    LowRiskHETDiagRate = sum(WeightedDiagRateGivenHIVPos .* ...
                        TestEligHIVPosPopByCohort .* ...
                        Params.LowRiskHETIndicator') /...
                        sum(TestEligHIVPosPopByCohort .*Params.LowRiskHETIndicator');
                    
                % High risk MSM
                    
                    %Testing - All Eligible (HIV- and HIV+)
                    HRMSMTestAllEligRate = sum(WeightedTestRateAllEligByCohort .* ...
                         TotalTestEligPopByCohort .* ...
                         (Params.riskLevelIndicator(:,Params.risk_Casual) .* Params.popIndicator(:,Params.pop_MSM))') /...
                         sum(TotalTestEligPopByCohort .*(Params.riskLevelIndicator(:,Params.risk_Casual) .* Params.popIndicator(:,Params.pop_MSM))');
                     
                    %Testing - All Eligible (HIV- and HIV+) - YMSM
                    HRYMSMTestAllEligRate = sum(WeightedTestRateAllEligByCohort .* ...
                         TotalTestEligPopByCohort .* ...
                         (Params.riskLevelIndicator(:,Params.risk_Casual) .* Params.YoungMSMIndicator)') /...
                         sum(TotalTestEligPopByCohort .*(Params.riskLevelIndicator(:,Params.risk_Casual) .* Params.YoungMSMIndicator)');
                     
                % Low risk MSM
                    
                    %Testing - All Eligible (HIV- and HIV+)
                    LRMSMTestAllEligRate = sum(WeightedTestRateAllEligByCohort .* ...
                         TotalTestEligPopByCohort .* ...
                         (Params.riskLevelIndicator(:,Params.risk_Main) .* Params.popIndicator(:,Params.pop_MSM))') /...
                         sum(TotalTestEligPopByCohort .*(Params.riskLevelIndicator(:,Params.risk_Main) .* Params.popIndicator(:,Params.pop_MSM))');
                     
                    %Testing - All Eligible (HIV- and HIV+) - YMSM
                    LRYMSMTestAllEligRate = sum(WeightedTestRateAllEligByCohort .* ...
                         TotalTestEligPopByCohort .* ...
                         (Params.riskLevelIndicator(:,Params.risk_Main) .* Params.YoungMSMIndicator)') /...
                         sum(TotalTestEligPopByCohort .*(Params.riskLevelIndicator(:,Params.risk_Main) .* Params.YoungMSMIndicator)'); 
                
            % Risk group
                for p = Params.pop_HET:Params.pop_IDU
                    
                    %Testing Rate - All Eligible (HIV- and HIV+)
                        RiskGroupAllEligTestRate(p) = ...
                            sum(WeightedTestRateAllEligByCohort .* ...
                            TotalTestEligPopByCohort .* ...
                            Params.popIndicator(:,p)') /...
                            sum(TotalTestEligPopByCohort .* Params.popIndicator(:,p)');  
                    
                    % Testing Rate - HIV+ only
                        RiskGroupHIVPosTestRate(p) = ...
                            sum(WeightedTestRateHIVPosByCohort .* ...
                            TestEligHIVPosPopByCohort .* ...
                            Params.popIndicator(:,p)') /...
                            sum(TestEligHIVPosPopByCohort .* Params.popIndicator(:,p)');  
                    
                    
                    % Diagnosis Rate - HIV+ only
                        RiskGroupDiagRate(p) = ...
                            sum(WeightedDiagRateGivenHIVPos .* ...
                            TestEligHIVPosPopByCohort .* ...
                            Params.popIndicator(:,p)') /...
                            sum(TestEligHIVPosPopByCohort .* Params.popIndicator(:,p)');   
                end
            
            % Disease stage and uninfected rates
                % Testing
                    DiseaseStageTestRate(Params.stage_Acute) = ...
                        sum(AcuteTestRate' .* Compartments(Params.B1,:)) /...
                        sum(Compartments(Params.B1,:));
                    DiseaseStageTestRate(Params.stage_LatentA) = ...
                        sum(LatentATestRate' .* Compartments(Params.C1,:)) /...
                        sum(Compartments(Params.C1,:)); 
                    DiseaseStageTestRate(Params.stage_LatentB) = ...
                        sum(LatentBTestRate' .* Compartments(Params.D1,:)) /...
                        sum(Compartments(Params.D1,:));  
                    DiseaseStageTestRate(Params.stage_Late) = ...
                        sum(LateTestRate' .* Compartments(Params.E1,:)) /...
                        sum(Compartments(Params.E1,:)); 
                    DiseaseStageTestRate(Params.stage_AIDS) = ...
                        sum(AIDSTestRate' .* Compartments(Params.F1,:)) /...
                        sum(Compartments(Params.F1,:));     
                    OverallUninfectedTestRate = sum(UninfectedTestRate' .* ...
                        Compartments(Params.A1,:)/sum(Compartments(Params.A1,:)));       
           
                % Diagnosis
                    DiseaseStageDiagRate(Params.stage_Acute) = ...
                        sum(AcuteDiagRate' .* Compartments(Params.B1,:)) /...
                        sum(Compartments(Params.B1,:));
                    DiseaseStageDiagRate(Params.stage_LatentA) = ...
                        sum(LatentADiagRate' .* Compartments(Params.C1,:)) /...
                        sum(Compartments(Params.C1,:)); 
                    DiseaseStageDiagRate(Params.stage_LatentB) = ...
                        sum(LatentBDiagRate' .* Compartments(Params.D1,:)) /...
                        sum(Compartments(Params.D1,:)); 
                    DiseaseStageDiagRate(Params.stage_Late) = ...
                        sum(LateDiagRate' .* Compartments(Params.E1,:)) /...
                        sum(Compartments(Params.E1,:)); 
                    DiseaseStageDiagRate(Params.stage_AIDS) = ...
                        sum(AIDSDiagRate' .* Compartments(Params.F1,:)) /...
                        sum(Compartments(Params.F1,:));                 

                    % Collect to send to CollectResults
                    
                    
                    % Testing
                    TTProg.WeightedTestRateAllEligByCohort(YrIndex,:)=  WeightedTestRateAllEligByCohort;
                    TTProg.WeightedTestRateAllElig(YrIndex,:)=  WeightedTestRateAllElig;
                    TTProg.WeightedTestRateHIVPosByCohort(YrIndex,:) = WeightedTestRateHIVPosByCohort; % added 9Oct
                    TTProg.RaceSpecificAllEligTestRate(YrIndex,:) = RaceSpecificAllEligTestRate;
                    TTProg.RaceSpecificHIVPosTestRate(YrIndex,:) = RaceSpecificHIVPosTestRate;% added 9Oct
                    TTProg.RiskGroupAllEligTestRate(YrIndex,:) = RiskGroupAllEligTestRate;
                    TTProg.RiskGroupHIVPosTestRate(YrIndex,:) = RiskGroupHIVPosTestRate;
                    TTProg.HRHAllEligTestRate(YrIndex,1) = HRHTestAllEligRate;
                    TTProg.HRHHIVPosTestRate(YrIndex,1) = HRHTestHIVPosRate;
                    TTProg.LRHAllEligTestRate(YrIndex,1) = LRHTestAllEligRate;
                    TTProg.LRHHIVPosTestRate(YrIndex,1) = LRHTestHIVPosRate;
                    TTProg.HRMSMAllEligTestRate(YrIndex,1) = HRMSMTestAllEligRate;
                    TTProg.HRYMSMAllEligTestRate(YrIndex,1) = HRYMSMTestAllEligRate;
                    TTProg.LRMSMAllEligTestRate(YrIndex,1) = LRMSMTestAllEligRate;
                    TTProg.LRYMSMAllEligTestRate(YrIndex,1) = LRYMSMTestAllEligRate;
                    TTProg.IDUAllEligTestRate(YrIndex,1) = RiskGroupAllEligTestRate(Params.pop_IDU);
                    TTProg.AllEligTestRateByRiskGpLevel(YrIndex,:) = [LRHTestAllEligRate; HRHTestAllEligRate; LRMSMTestAllEligRate; HRMSMTestAllEligRate; RiskGroupAllEligTestRate(Params.pop_IDU)];
                    TTProg.DiseaseStageTestRate(YrIndex,:) = DiseaseStageTestRate;
                    TTProg.OverallUninfectedTestRate(YrIndex,:) = OverallUninfectedTestRate;

                    % Diagnosis
                    TTProg.WeightedDiagRateGivenHIVPos(YrIndex,:) = WeightedDiagRateGivenHIVPos;
                    TTProg.DiagRateAll(YrIndex,:) = DiagRateAll;
                    TTProg.RaceSpecificDiagRate(YrIndex,:) = RaceSpecificDiagRate;
                    TTProg.RiskGroupDiagRate(YrIndex,:) = RiskGroupDiagRate;
                    TTProg.HRHDiagRate(YrIndex,1) = HRHDiagRate;
                    TTProg.LowRiskHETDiagRate(YrIndex,1) = LowRiskHETDiagRate;
                    TTProg.DiseaseStageDiagRate(YrIndex,:) = DiseaseStageDiagRate;
                    
        end %pulling only values for rates only for specified year
        
    end

        
    % Calculate Non-Testing Numbers
    for LTCSection = 1:1
        
       
%         %LTCAfter
%             % Pull rates for that year
%             LinkageAfterRate_Acute = TTProg.LinkageAfterRate_Acute;
%             LinkageAfterRate_LatentA = TTProg.LinkageAfterRate_LatentA;
%             LinkageAfterRate_LatentB = TTProg.LinkageAfterRate_LatentB;
%             LinkageAfterRate_Late = TTProg.LinkageAfterRate_Late;
%             LinkageAfterRate_AIDS = TTProg.LinkageAfterRate_AIDS;
%             
%             % All people aware and not linked to care (eligible for LTC
%             % after first)
%             AwareNotLTCComparts = [Params.B2,Params.C2,Params.D2,Params.E2,Params.F2];
%             TotalAwareNotLTCByCohort = sum(Compartments(AwareNotLTCComparts,:));
%             
%             % Total number linked to care from Aware
%             NumLinkedAfterByCohort = ...
%                     (LinkageAfterRate_Acute' .* Compartments(Params.B2,:) + ...
%                     LinkageAfterRate_LatentA' .* Compartments(Params.C2,:) + ...
%                     LinkageAfterRate_LatentB' .* Compartments(Params.D2,:) + ...
%                     LinkageAfterRate_Late' .* Compartments(Params.E2,:) + ...
%                     LinkageAfterRate_AIDS' .* Compartments(Params.F2,:));
%             
%             % Linkage-after-first rate by cohort 
%                 % Calculation of the weighted rate of being LTC by
%                 % cohort out of all people aware and not linked to care
%             WeightedLinkageAfterRateByCohort = ...
%                 (LinkageAfterRate_Acute' .* Compartments(Params.B2,:) + ...
%                 LinkageAfterRate_LatentA' .* Compartments(Params.C2,:) + ...
%                 LinkageAfterRate_LatentB' .* Compartments(Params.D2,:) + ...
%                 LinkageAfterRate_Late' .* Compartments(Params.E2,:) + ...
%                 LinkageAfterRate_AIDS' .* Compartments(Params.F2,:))...
%                 ./ TotalAwareNotLTCByCohort;
% 
%              WeightedLinkageAfterRateOverall = ...
%                  (WeightedLinkageAfterRateByCohort * ...
%                  TotalAwareNotLTCByCohort') ./ ...
%                  sum(TotalAwareNotLTCByCohort);
% % KH review: we may not need these calculations.
%              TTProg.LinkageAfterRate = WeightedLinkageAfterRateOverall;
%              TTProg.NumLinkedAfterByCohort = NumLinkedAfterByCohort;
%              TTProg.TotalAwareNotLTCByCohort = TotalAwareNotLTCByCohort;
                 
        
    end
    
    % <-- update when allocation outcomes are finalized
    for ExtraCodeSection = 1:1
%     
        % Negative tests <--Moved from CalcTransRates on
%         % 12May2015. Need to adapt for time steps?
%         numNegConvTests = TTProg.numNegConvTestsNonCDC +  TTProg.numNegConvTestsCDCFunds;
%         numNegRapidTests = TTProg.numNegRapidTestsNonCDC +  TTProg.numNegRapidTestsCDCFunds;
%         TTProg.numConvNegNotifyNonCDC = ...
%               numNegConvTests .* NotifyNegConvProb';
%         TTProg.numRapidNegNotifyNonCDC = ...
%             numNegRapidTests .* NotifyNegRapidProb';        
        
           % Determine number of tests from CDC funding
        
                
                    % Need to update
         

                % Number of Positive Acute Tests from CDC
                
                      
%                     TTProg.numPosRapidAcuteTestsCDCFunds = ...
%                         pctRapid .* TestSens_Rapid_Acute .* Compartments(Params.B1,:)' .* AcuteTestRate_CDCFunds;
%                     
%                              
                   
%                     TTProg.numPosConvAcuteTestsCDCFunds = ...
%                         (1-pctRapid) .* TestSens_Conv_Acute .* Compartments(Params.B1,:)' .* AcuteTestRate_CDCFunds;

                % Number of Positive Chronic Tests from CDC
            
                    
%                        TTProg.numPosRapidChronicTestsCDCFunds = ...
%                         pctRapid .* (...
%                         TestSens_Rapid_Chronic .* (...
%                         Compartments(Params.C1,:)' .* LatentATestRate_CDCFunds + ...
%                         Compartments(Params.D1,:)' .* LatentBTestRate_CDCFunds + ...
%                         Compartments(Params.E1,:)' .* LateTestRate_CDCFunds + ...
%                         ((Compartments(Params.F0,:) + Compartments(Params.F1,:))' .* AIDSTestRate_CDCFunds)));
%               
                      
%                     TTProg.numPosConvChronicTestsCDCFunds = ...
%                         (1 - pctRapid) .* (...
%                         TestSens_Conv_Chronic .* (...
%                         Compartments(Params.C1,:)' .* LatentATestRate_CDCFunds + ...
%                         Compartments(Params.D1,:)' .* LatentBTestRate_CDCFunds + ...
%                         Compartments(Params.E1,:)' .* LateTestRate_CDCFunds + ...
%                         ((Compartments(Params.F0,:) + Compartments(Params.F1,:))' .* AIDSTestRate_CDCFunds)));
                
                % Number of Negative Rapid Tests from CDC
                
%                      TTProg.numNegRapidTestsCDCFunds = ...
%                         pctRapid .* (...
%                         Compartments(Params.A1,:)' .* UninfectedTestRate_CDCFunds + ...
%                         (1 - TestSens_Rapid_Acute) .* (Compartments(Params.B1,:)' .* AcuteTestRate_CDCFunds) + ...
%                         (1 - TestSens_Rapid_Chronic) .* (...
%                         Compartments(Params.C1,:)' .* LatentATestRate_CDCFunds + ...
%                         Compartments(Params.D1,:)' .* LatentBTestRate_CDCFunds + ...
%                         Compartments(Params.E1,:)' .* LateTestRate_CDCFunds + ...
%                         ((Compartments(Params.F0,:) + Compartments(Params.F1,:))' .* AIDSTestRate_CDCFunds)));
%                 
                    
                 % Number of Negative Conventional Tests from CDC
                
%                     TTProg.numNegConvTestsCDCFunds = ...
%                         (1 - pctRapid) .* (...
%                         Compartments(Params.A1,:)' .* UninfectedTestRate_CDCFunds + ...
%                         (1 - TestSens_Conv_Acute) .* (Compartments(Params.B1,:)' .* AcuteTestRate_CDCFunds) + ...
%                         (1 - TestSens_Conv_Chronic) .* (...
%                         Compartments(Params.C1,:)' .* LatentATestRate_CDCFunds + ...
%                         Compartments(Params.D1,:)' .* LatentBTestRate_CDCFunds + ...
%                         Compartments(Params.E1,:)' .* LateTestRate_CDCFunds + ...
%                         ((Compartments(Params.F0,:) + Compartments(Params.F1,:))' .* AIDSTestRate_CDCFunds)));
%       

%          % Total in care [273x1]
%                 numberDiagNotInCare = sum(Compartments([Params.B2, Params.C2, Params.D2,...
%                     Params.E2, Params.F2],:))';     
%          % Total number on ART [273x1]
%                 numberOnART = sum(Compartments([Params.B4, Params.C4, Params.D4,...
%                     Params.E4, Params.F4],:))';
%          % Total in care [273x1]
%                 numberInCareNotOnART = sum(Compartments([Params.B3, Params.C3, Params.D3,...
%                     Params.E3, Params.F3],:))'; 
%          
%         % Linked first
%         TTProg.numTSLinkedFirstFromNonCDCFunds = ...
%             (TTProg.numTSConvPosNotifyNonCDC + TTProg.numTSRapidPosNotifyNonCDC) ...
%             .* TTProg.LinkageFirstProb;
% 
% 
% % 
%                     % Number who initiated ART based non-CDC investment
%                     TTProg.numARTInitFromNonCDCFunds = ...
%                         min(Params.intn_ARTInitiation_MaxReach, Params.tt_ARTInitiation_d_3(Params.stage_Acute)) .* ...
%                         Compartments(Params.B3,:)'...
%                         + min(Params.intn_ARTInitiation_MaxReach, Params.tt_ARTInitiation_d_3(Params.stage_LatentA)) .* ...
%                         Compartments(Params.C3,:)'...
%                         + min(Params.intn_ARTInitiation_MaxReach, Params.tt_ARTInitiation_d_3(Params.stage_LatentB)) .* ...
%                         Compartments(Params.D3,:)' ...
%                         + min(Params.intn_ARTInitiation_MaxReach, Params.tt_ARTInitiation_d_3(Params.stage_Late)) .* ...
%                         Compartments(Params.E3,:)'...
%                         + min(Params.intn_ARTInitiation_MaxReach, Params.tt_ARTInitiation_d_3(Params.stage_AIDS)) .* ...
%                         Compartments(Params.F3,:)' ;

%                      % Number who initiated ART based on the CDC investment in the
%                      % intervention
%                     TTProg.numARTInitFromCDCFunds = ...
%                         AcuteInitiateARTRate_CDCFunds * Compartments(Params.B3,:)'...
%                         + LatentAInitiateARTRate_CDCFunds * Compartments(Params.C3,:)'...
%                         + LatentBInitiateARTRate_CDCFunds * Compartments(Params.D3,:)' ...
%                         + LateInitiateARTProb_CDCFunds * Compartments(Params.E3,:)'...
%                         + AIDSInitiateARTProb_CDCFunds * Compartments(Params.F3,:)';

%         % Adherence to ART
%         TTProg.numTSAdherentFromNonCDCFunds = ...
%             numberOnART.* TTProg.AdherentProb;

% 
%                     % Number adherent
%                     TTProg.numAdherentFromCDCFunds = numberOnART.*AdherentProb_CDCFunds;
%                     TTProg.numAdherentFromNonCDCFunds = numberOnART.*...
%                         min(Params.tt_adherent_r_3, Params.intn_TxAdherence_MaxReach);

% 
%         % ART initiation
%        % <-- should optcareprob be a rate?
%        % <-- should at least be by timestep
%         TTProg.numTSARTInitFromNonCDCFunds = ...
%                 TTProg.AcuteInitiateARTProb .* Compartments(Params.B3,:)'...
%                 + TTProg.LatentAInitiateARTProb .* Compartments(Params.C3,:)'...
%                 + TTProg.LatentBInitiateARTProb.* Compartments(Params.D3,:)' ...
%                 + TTProg.LateInitiateARTProb .* Compartments(Params.E3,:)'...
%                 + TTProg.AIDSInitiateARTProb .* Compartments(Params.F3,:)';    

                
            % Run the probs through to CalcIntnAffected <-- it depends on how
            % we want to calculate then number of people who progress
            
                %<-- possibly remove
%             TTProg.LinkageFirstProb = LinkageFirstProb;
%             TTProg.LinkageAfterFirstProb = LinkageAfterFirstProb;

% %               
%                 % Linked first
%                 TTProg.numLinkedFirstFromNonCDCFunds = ...
%                     (TTProg.numConvPosNotifyNonCDC + TTProg.numRapidPosNotifyNonCDC) ...
%                     .*LinkageFirstProb;
               


%                 
%                 
% 
%                 % Adherence to ART
% %                 TTProg.numAdherentFromNonCDCFunds = ...
% %                     numberOnART.* TTProg.AdherentProb;
% 
%                 % ART initiation
%                   % Number of people eligible for ART
%                     TTProg.numberInCareEligForART = ...
%                           Compartments(Params.B3,:)'* TTProg.ARTElig(Params.stage_Acute)...
%                         + Compartments(Params.C3,:)'* TTProg.ARTElig(Params.stage_LatentA)...
%                         + Compartments(Params.D3,:)'* TTProg.ARTElig(Params.stage_LatentB)...
%                         + Compartments(Params.E3,:)'* TTProg.ARTElig(Params.stage_Late)...
%                         + Compartments(Params.F3,:)'* TTProg.ARTElig(Params.stage_AIDS);
%                     
%   
%                      
                
%                 TTProg.numARTInitFromNonCDCFunds = ...
%                         AcuteInitiateARTProb .* Compartments(Params.B3,:)'...
%                         + LatentAInitiateARTProb .* Compartments(Params.C3,:)'...
%                         + LatentBInitiateARTProb.* Compartments(Params.D3,:)'...
%                         + LateInitiateARTProb .* Compartments(Params.E3,:)'...
%                         + AIDSInitiateARTProb .* Compartments(Params.F3,:)';
%       

    end
end